install.packages("choroplethr")
install.packages("choroplethrMaps")
library(choroplethr)
library(choroplethrMaps)
data("df_pop_state")
df_pop_state
View(df_pop_state)
state_choropleth(df_pop_state)
######### ggmap
install.packages('ggmap')
install.packages("ggmap")
library(ggmap)
# customize map with title and legend
state_choropleth(df_pop_state,
title  = "2012 State Population Estimates",
legend = "Population")
library(choroplethr)
library(choroplethrMaps)
data("df_pop_state")
df_pop_state
# customize map with title and legend
state_choropleth(df_pop_state,
title  = "2012 State Population Estimates",
legend = "Population")
# change scale
# the default is 7 colors - these maps are identical
state_choropleth(df_pop_state)
state_choropleth(df_pop_state, num_colors = 7)
# 2 colors shows which states are above / below median value
state_choropleth(df_pop_state, num_colors=2)
# 1 color uses a continuous scale - useful for seeing outliers
state_choropleth(df_pop_state, num_colors = 1)
# use the "zoom" parameter to zoom in on certain states
# remember: all choroplethr requires lower-case state names
# combine multiple states using ?c
state_choropleth(df_pop_state,
zoom = c("california", "oregon", "washington"))
# combine choropleth map and reference map by setting the "reference_map"
# parameter to TRUE
state_choropleth(df_pop_state,
num_colors = 1,
zoom = c("california", "oregon", "washington"),
reference_map = TRUE)
# combine choropleth map and reference map by setting the "reference_map"
# parameter to TRUE
state_choropleth(df_pop_state,
num_colors = 1,
zoom = c("california", "oregon", "washington"),
reference_map = TRUE)
register_google("AIzaSyDqZc13hrQ7ELNTxdD3SybCSvVO0uMow90")
# combine choropleth map and reference map by setting the "reference_map"
# parameter to TRUE
state_choropleth(df_pop_state,
num_colors = 1,
zoom = c("california", "oregon", "washington"),
reference_map = TRUE)
install.packages("mapproj")
library(mapproj)
# combine choropleth map and reference map by setting the "reference_map"
# parameter to TRUE
state_choropleth(df_pop_state,
num_colors = 1,
zoom = c("california", "oregon", "washington"),
reference_map = TRUE)
?df_state_demographics
data(df_state_demographics)
View(df_state_demographics)
df_state_demographics$value =
df_state_demographics$per_capita_income
View(df_state_demographics)
state_choropleth(df_state_demographics,
num_colors = 2,
title  = "2013 State Per Capita Income Estimates",
legend = "Dollars")
# get a census key at https://api.census.gov/data/key_signup.html
# then set it like this
api.key.install("AIzaSyDqZc13hrQ7ELNTxdD3SybCSvVO0uMow90")
# get and view demographics from 2010
df_2010 = get_state_demographics(2010)
View(df_2010)
# map 2010 per capita income like this
df_2010$value = df_2010$per_capita_income
install.packages('quantmod')
library(quantmod)
from <- "USD"
to <- "EUR"
getQuote(paste0(from, to, "=X"))
to <- "COP"
getQuote(paste0(from, to, "=X"))
getSymbols("USD=X",src="yahoo",from="2005-01-01")
getSymbols("COP=X",src="yahoo",from="2005-01-01")
tail(`COP=X`)
chartSeries(`COP=X`, subset='last 3 months')
addBBands(n = 20, sd = 2, ma = "SMA", draw = 'bands', on = -1)
dim(`COP=X`)
plot(`COP=X`)
chartSeries(`COP=X`, subset='last 3 weeks')
addBBands(n = 20, sd = 2, ma = "SMA", draw = 'bands', on = -1)
chartSeries(`COP=X`, subset='last 4 weeks')
addBBands(n = 20, sd = 2, ma = "SMA", draw = 'bands', on = -1)
addRSI()
setwd("~/Projects/R/website/project1/mapvisualization")
data=read.csv('C:/Users/dsaav/Documents/Projects/R/Datasets/database.csv',
header=TRUE,stringsAsFactors = FALSE)
sum(is.na(data$ZIP.CODE))
library("ggmap")
available.packages()
clearPushBack()
clear()
cls
sum(is.na(dset$LATITUDE))
dset<-data[!complete.cases(data$ZIP.CODE), ]
sum(is.na(data$ZIP.CODE))
View(data)
dim(data)
sum(is.na(data$LATITUDE))
dset <- as.data.frame(data[,6:7])
head(dset)
dset<-data[!complete.cases(data$ZIP.CODE), ]
sum(is.na(dset$LATITUDE))
head(dset)
dset<-data[!complete.cases(data$LATITUDE), ]
sum(is.na(dset$LATITUDE))
dset2 <- as.data.frame(dset[,6:7])
View(dset2)
dim(dset)
dim(data)
dim(dset)/dim(data)
dim(data[!complete.cases(data$ZIP.CODE), ])
dim(data[!complete.cases(data$ZIP.CODE), ])/dim(data)
names(dates)
names(dset)
result <- do.call(rbind,
lapply(1:nrow(dset),
function(i)revgeocode(as.numeric(dset[i,6:7]))))
View(result)
View(result)
View(dset)
View(dset)
result <- do.call(rbind,
lapply(1:nrow(dset),
function(i)revgeocode(as.numeric(dset[i,6:7]))))
res <- revgeocode(c(dset$LATITUDE,dset$LONGITUDE), output="more")
res <- revgeocode(c(dset$LATITUDE,dset$LONGITUDE), output="all")
library(googleway)
install.packages('googleway')
library(googleway)
res <- apply(dset, 1, function(x){
google_reverse_geocode(location = c(dset["Latitude"], dset["Longitude"]),key = key)
})
key <- "AIzaSyDqZc13hrQ7ELNTxdD3SybCSvVO0uMow90"
res <- apply(dset, 1, function(x){
google_reverse_geocode(location = c(dset["Latitude"], dset["Longitude"]),key = key)
})
View(dset)
res <- apply(dset, 1, function(x){
google_reverse_geocode(location = c(dset["LATIDUDE"], dset["LONGITUDE"]),key = key)
})
res <- apply(dset, 1, function(x){
google_reverse_geocode(location = c(dset["LATITUDE"], dset["LONGITUDE"]),key = key)
})
res <- apply(dset, 1, function(x){
google_reverse_geocode(location = c(x["LATITUDE"], x["LONGITUDE"]),key = key)
})
res <- apply(dset, 1, function(x){
google_reverse_geocode(location = c(x["LATITUDE"], x["LONGITUDE"]),
key = key)})
res <- apply(dset, 1, function(x){
google_reverse_geocode(LOCATION = c(x["LATITUDE"], x["LONGITUDE"]),
key = key)})
res <- apply(dset, 1, function(x){
google_reverse_geocode(location = c(x["LATITUDE"], x["LONGITUDE"]),
key = key)})
